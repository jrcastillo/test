// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	strfmt "github.com/go-openapi/strfmt"
)

// NewTransaçãoParams creates a new TransaçãoParams object
// no default values defined in spec.
func NewTransaçãoParams() TransaçãoParams {

	return TransaçãoParams{}
}

// TransaçãoParams contains all the bound params for the transação operation
// typically these are obtained from a http.Request
//
// swagger:parameters transação
type TransaçãoParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: formData
	*/
	Transaction *string
	/*
	  In: formData
	*/
	Transaction3DSClient *string
	/*
	  In: formData
	*/
	Transaction3DSRede *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewTransaçãoParams() beforehand.
func (o *TransaçãoParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(32 << 20); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}
	fds := runtime.Values(r.Form)

	fdTransaction, fdhkTransaction, _ := fds.GetOK("Transaction")
	if err := o.bindTransaction(fdTransaction, fdhkTransaction, route.Formats); err != nil {
		res = append(res, err)
	}

	fdTransaction3DSClient, fdhkTransaction3DSClient, _ := fds.GetOK("Transaction3DSClient")
	if err := o.bindTransaction3DSClient(fdTransaction3DSClient, fdhkTransaction3DSClient, route.Formats); err != nil {
		res = append(res, err)
	}

	fdTransaction3DSRede, fdhkTransaction3DSRede, _ := fds.GetOK("Transaction3DSRede")
	if err := o.bindTransaction3DSRede(fdTransaction3DSRede, fdhkTransaction3DSRede, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindTransaction binds and validates parameter Transaction from formData.
func (o *TransaçãoParams) bindTransaction(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Transaction = &raw

	return nil
}

// bindTransaction3DSClient binds and validates parameter Transaction3DSClient from formData.
func (o *TransaçãoParams) bindTransaction3DSClient(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Transaction3DSClient = &raw

	return nil
}

// bindTransaction3DSRede binds and validates parameter Transaction3DSRede from formData.
func (o *TransaçãoParams) bindTransaction3DSRede(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Transaction3DSRede = &raw

	return nil
}
