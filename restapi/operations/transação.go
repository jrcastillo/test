// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// TransaçãoHandlerFunc turns a function with the right signature into a transação handler
type TransaçãoHandlerFunc func(TransaçãoParams) middleware.Responder

// Handle executing the request and returning a response
func (fn TransaçãoHandlerFunc) Handle(params TransaçãoParams) middleware.Responder {
	return fn(params)
}

// TransaçãoHandler interface for that can handle valid transação params
type TransaçãoHandler interface {
	Handle(TransaçãoParams) middleware.Responder
}

// NewTransação creates a new http.Handler for the transação operation
func NewTransação(ctx *middleware.Context, handler TransaçãoHandler) *Transação {
	return &Transação{Context: ctx, Handler: handler}
}

/*Transação swagger:route POST /desenvolvedores/v1/transactions/ transação

transação

A autorização é o primeiro passo para realizar uma transação.

*/
type Transação struct {
	Context *middleware.Context
	Handler TransaçãoHandler
}

func (o *Transação) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewTransaçãoParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
